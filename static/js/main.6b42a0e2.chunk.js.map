{"version":3,"sources":["Forms.js","ConfirmDelete.js","Tasks.js","Groups.js","index.js"],"names":["GroupForm","addGroup","exitForm","useState","title","setTitle","onSubmit","type","onChange","e","target","value","TaskForm","action","task","note","taskForm","setTaskForm","useEffect","rows","cols","ConfirmDelete","deleteFunc","deleteItem","closeCallback","className","onClick","Tasks","group","updateGroupTasks","useImmer","tasks","setTasks","show","selected","item","removeBox","setRemoveBox","removeTask","taskName","draft","style","Object","entries","map","taskObj","completed","Groups","JSON","parse","localStorage","getItem","groups","setGroups","groupForm","selectedGroup","expand","setExpand","name","removeGroup","keys","length","setItem","stringify","groupName","groupObj","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6b42a0e2.chunk.js","sourcesContent":["import { useState, useEffect } from 'react';\n\n\nfunction GroupForm ({ addGroup, exitForm, }) {\n    const [title, setTitle] = useState('');\n    const onSubmit = () => {\n        addGroup(title);\n        exitForm();\n    }\n\n    return (\n        <form onSubmit={onSubmit}>\n            <label>Title:\n                <input type='text' onChange={(e) => setTitle(e.target.value)} value={title}/>\n            </label>\n            <input type='submit' value='Submit' />\n        </form>\n    )\n}\n\n\nfunction TaskForm ({ action, task, exitForm, }) {\n    const [taskForm, setTaskForm] = useState({\n        title: task?.title,\n        note: task?.note,\n    })\n\n    const onSubmit = () => {\n        action(taskForm);\n        exitForm();\n    }\n\n    useEffect(() => {\n        setTaskForm({\n            title: task?.title,\n            note: task?.note,\n        })\n    }, [task])\n\n\n    return (\n        <form onSubmit={onSubmit}>\n            <label>Title:\n                <input type='text' onChange={(e) => setTaskForm({ ...taskForm, title: e.target.value })} value={taskForm.title || ''}/>\n            </label>\n            <label>Note:\n                <textarea rows={3} cols={25} onChange={(e) => setTaskForm({ ...taskForm, note: e.target.value })} value={taskForm.note || ''}/>\n            </label>\n            <input type='submit' value='Submit'/>\n        </form>\n    )\n}\n\nexport { GroupForm, TaskForm, }","import React from 'react';\n\nexport const ConfirmDelete = ({ deleteFunc, deleteItem, closeCallback, }) => {\n    return (\n        <div className='confirmDelete'>\n            <p>Are you sure?</p>\n            <button onClick={() => {\n                        deleteFunc(deleteItem);\n                        closeCallback();\n                    }}\n                >Yes</button>\n            <button onClick={() => closeCallback()}>No</button>\n        </div>\n    )\n}","import { useImmer } from 'use-immer';\nimport { useState, useEffect } from 'react';\n\nimport { TaskForm } from './Forms';\nimport { ConfirmDelete } from './ConfirmDelete';\n\n\nfunction Tasks({ group, updateGroupTasks }) {\n    const [tasks, setTasks] = useImmer(group.tasks || {});\n    const [taskForm, setTaskForm] = useState({\n        show: false,\n        action: null,\n        selected: null,\n    });\n    const [removeBox, setRemoveBox] = useState({\n        show: false,\n        item: null,\n    });\n\n    const addTask = (task) => {\n        setTasks(draft => {\n            draft[task.title] = task;\n        })\n    }\n\n    const updateTask = (task) => {\n        setTasks(draft => {\n            delete draft[taskForm.selected.title]; \n            draft[task.title] = task;\n        })\n    }\n\n    const removeTask = (taskName) => {\n        setTasks(draft => {\n            delete draft[taskName];\n        })\n    }\n\n    const completeTaskToggle = (task) => {\n        setTasks(draft => {\n            draft[task].completed = (tasks[task].completed) ? false : true;\n        })\n    }\n\n    useEffect(() => {\n        updateGroupTasks({ group, tasks });\n    }, [tasks, updateGroupTasks, group])\n \n    return (\n        <div>\n            <div className='tasks'>\n                <div className='head-bar'>\n                    <p style={{ 'text-decoration': 'underline' }}>Tasks</p>\n                    <button className='new-btn' \n                        onClick={() => {\n                            setTaskForm({\n                                show: true,\n                                action: 'new'\n                            });\n                        }\n                    }>+</button>\n                </div>\n                <ul>\n                    {Object.entries(tasks).map(([taskName, taskObj]) => {\n                        return (\n                            <li key={taskName}>\n                                <div className='task'>\n                                    <button className='remove-btn' onClick={() => setRemoveBox({ show: true, item: taskName, })}>x</button>\n                                    <p className={(taskObj.completed) ? 'title crossed' : 'title'} onClick={() => {\n                                        setTaskForm({\n                                            show: true,\n                                            action: 'update',\n                                            selected: taskObj,\n                                        });\n                                    }\n                                    }>{taskName}</p>\n                                    <button className='complete-btn' onClick={() => completeTaskToggle(taskName)}>&#10003;</button>\n                                </div>\n                                {removeBox.show && (removeBox.item === taskName) &&\n                                    <ConfirmDelete \n                                        deleteFunc={removeTask}\n                                        deleteItem={removeBox.item}\n                                        closeCallback={() => setRemoveBox({ show: false, })}\n                                    />\n                                }\n                            </li>\n                        )\n                    })}\n                </ul>\n            </div>\n            {taskForm.show && \n                <TaskForm \n                    action={(taskForm.action === 'new') ? addTask : updateTask} \n                    task={taskForm.selected} \n                    exitForm={() => setTaskForm({ show: false })}\n                /> \n            }\n        </div>\n    )\n}\n\n\nexport default Tasks","import './App.scss';\nimport { useState, useEffect } from 'react';\n\nimport { GroupForm } from './Forms';\nimport Tasks from './Tasks';\nimport { ConfirmDelete } from './ConfirmDelete';\nimport { useImmer } from 'use-immer';\n\n\nfunction Groups() {\n  const [groups, setGroups] = useImmer(JSON.parse(localStorage.getItem('Groups')) || {});\n  const [expand, setExpand] = useState({\n    groupForm: false,\n    selectedGroup: null,\n  });\n  const [removeBox, setRemoveBox] = useState({\n    show: false,\n    item: null,\n  });\n  \n  const addGroup = (name) => {\n    setGroups(draft => {\n      draft[name] = {\n        name,\n        tasks: {}\n      };\n    })\n  }\n\n  const removeGroup = (name) => {\n    setGroups(draft => {\n      delete draft[name];\n    })\n  } \n\n  const updateGroupTasks = ({ group, tasks }) => {\n    setGroups(draft => {\n      draft[group.name].tasks = tasks;\n    })\n  }\n\n  useEffect(() => {\n    // Initialize General Group if empty\n    if (Object.keys(groups).length === 0) {\n      addGroup('General');\n    }\n    localStorage.setItem('Groups', JSON.stringify(groups));\n  })\n\n  return (\n    <div>\n      <div className='groups'>\n        <div className='head-bar'>\n          <h2>Groups</h2>\n          <button className='new-btn' onClick={() => setExpand({ groupForm: true })}>+</button>\n        </div>\n        {expand.groupForm && \n          <GroupForm \n            addGroup={addGroup}\n            exitForm={() => setExpand({ groupForm: false })}\n          /> \n        }\n        <ul>\n          {Object.entries(groups).map(([groupName, groupObj]) => {\n            return (\n              <li key={groupName} className='group'>\n                <button className='remove-btn' onClick={() => setRemoveBox({ show: true, item: groupName, })}>x</button>\n                <p className='title' onClick={() => setExpand({ selectedGroup: (expand.selectedGroup === groupName) ? null : groupName })}>{groupName}</p>\n                {expand.selectedGroup === groupName && \n                  <Tasks group={groupObj} updateGroupTasks={updateGroupTasks}/>\n                }\n                {removeBox.show && (removeBox.item === groupName) &&\n                  <ConfirmDelete \n                    deleteFunc={removeGroup}\n                    deleteItem={removeBox.item}\n                    closeCallback={() => setRemoveBox({ show: false, })}\n                  />\n                }\n              </li>\n            )\n          })}\n        </ul>\n      </div>\n    </div>\n  )\n}\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header>\n        <h1>To-Do</h1>\n      </header>\n      <Groups />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './Groups';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}