{"version":3,"sources":["Forms.js","Tasks.js","Groups.js","index.js"],"names":["GroupForm","addGroup","exitForm","useState","title","setTitle","onSubmit","type","onChange","e","target","value","TaskForm","action","task","note","taskForm","setTaskForm","useEffect","Tasks","group","updateGroupTasks","useImmer","tasks","setTasks","show","selected","className","onClick","Object","entries","map","taskName","taskObj","draft","removeTask","completed","Groups","JSON","parse","localStorage","getItem","groups","setGroups","groupForm","selectedGroup","expand","setExpand","name","keys","length","setItem","stringify","groupName","groupObj","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.72fea778.chunk.js","sourcesContent":["import { useState, useEffect } from 'react';\n\n\nfunction GroupForm ({ addGroup, exitForm, }) {\n    const [title, setTitle] = useState('');\n    const onSubmit = () => {\n        addGroup(title);\n        exitForm();\n    }\n\n    return (\n        <form onSubmit={onSubmit}>\n            <label>Title:\n                <input type='text' onChange={(e) => setTitle(e.target.value)} value={title}/>\n            </label>\n            <input type='submit' value='Submit' />\n        </form>\n    )\n}\n\n\nfunction TaskForm ({ action, task, exitForm, }) {\n    const [taskForm, setTaskForm] = useState({\n        title: task?.title,\n        note: task?.note,\n    })\n\n    const onSubmit = () => {\n        action(taskForm);\n        exitForm();\n    }\n\n    useEffect(() => {\n        setTaskForm({\n            title: task?.title,\n            note: task?.note,\n        })\n    }, [task])\n\n\n    return (\n        <form onSubmit={onSubmit}>\n            <label>Title:\n                <input type='text' onChange={(e) => setTaskForm({ ...taskForm, title: e.target.value })} value={taskForm.title || ''}/>\n            </label>\n            <label>Note:\n                <input type='textfield' onChange={(e) => setTaskForm({ ...taskForm, note: e.target.value })} value={taskForm.note || ''}/>\n            </label>\n            <input type='submit' value='Submit'/>\n        </form>\n    )\n}\n\nexport { GroupForm, TaskForm, }","import { useImmer } from 'use-immer';\nimport { useState, useEffect } from 'react';\n\nimport { TaskForm } from './Forms';\n\n\nfunction Tasks({ group, updateGroupTasks }) {\n    const [tasks, setTasks] = useImmer(group.tasks || {});\n    const [taskForm, setTaskForm] = useState({\n        show: false,\n        action: null,\n        selected: null,\n    });\n\n    const addTask = (task) => {\n        setTasks(draft => {\n            draft[task.title] = task;\n        })\n    }\n\n    const updateTask = (task) => {\n        setTasks(draft => {\n            delete draft[taskForm.selected.title]; \n            draft[task.title] = task;\n        })\n    }\n\n    const removeTask = (taskName) => {\n        setTasks(draft => {\n            delete draft[taskName];\n        })\n    }\n\n    const completeTaskToggle = (task) => {\n        setTasks(draft => {\n            draft[task].completed = (tasks[task].completed) ? false : true;\n        })\n    }\n\n    useEffect(() => {\n        updateGroupTasks({ group, tasks });\n    }, [tasks, updateGroupTasks, group])\n \n    return (\n        <div>\n            <div className='tasks'>\n                <div className='head-bar'>\n                    <p>Tasks</p>\n                    <button className='new-btn' \n                        onClick={() => {\n                            setTaskForm({\n                                show: true,\n                                action: 'new'\n                            });\n                        }\n                    }>+</button>\n                </div>\n                <ul>\n                    {Object.entries(tasks).map(([taskName, taskObj]) => {\n                        return (\n                            <li key={taskName} className='task'>\n                                <button className='remove-btn' onClick={() => setTasks(draft => draft = removeTask(taskName))}>x</button>\n                                <p className={(taskObj.completed) ? 'title crossed' : 'title'} onClick={() => {\n                                    setTaskForm({\n                                        show: true,\n                                        action: 'update',\n                                        selected: taskObj,\n                                    });\n                                }\n                                }>{taskName}</p>\n                                <button className='complete-btn' onClick={() => completeTaskToggle(taskName)}>&#10003;</button>\n                            </li>\n                        )\n                    })}\n                </ul>\n            </div>\n            {taskForm.show && \n                <TaskForm \n                    action={(taskForm.action === 'new') ? addTask : updateTask} \n                    task={taskForm.selected} \n                    exitForm={() => setTaskForm({ show: false })}\n                /> \n            }\n        </div>\n    )\n}\n\n\nexport default Tasks","import './App.scss';\nimport { useState, useEffect } from 'react';\n\nimport { GroupForm } from './Forms';\nimport Tasks from './Tasks';\nimport { useImmer } from 'use-immer';\n\n\nfunction Groups() {\n  const [groups, setGroups] = useImmer(JSON.parse(localStorage.getItem('Groups')) || {});\n  const [expand, setExpand] = useState({\n    groupForm: false,\n    selectedGroup: null,\n  })\n  \n  const addGroup = (name) => {\n    setGroups(draft => {\n      draft[name] = {\n        name,\n        tasks: {}\n      };\n    })\n  }\n\n  const removeGroup = (name) => {\n    setGroups(draft => {\n      delete draft[name];\n    })\n  } \n\n  const updateGroupTasks = ({ group, tasks }) => {\n    setGroups(draft => {\n      draft[group.name].tasks = tasks;\n    })\n  }\n\n  useEffect(() => {\n    // Initialize General Group if empty\n    if (Object.keys(groups).length === 0) {\n      addGroup('General');\n    }\n\n    localStorage.setItem('Groups', JSON.stringify(groups));\n  })\n\n  return (\n    <div>\n      <div className='groups'>\n        <div className='head-bar'>\n          <h2>Groups</h2>\n          <button className='new-btn' onClick={() => setExpand({ groupForm: true })}>+</button>\n        </div>\n        {expand.groupForm && \n          <GroupForm \n            addGroup={addGroup}\n            exitForm={() => setExpand({ groupForm: false })}\n          /> \n        }\n        <ul>\n          {Object.entries(groups).map(([groupName, groupObj]) => {\n            return (\n              <li key={groupName} className='group'>\n                <button className='remove-btn' onClick={() => removeGroup(groupName)}>x</button>\n                <p className='title' onClick={() => setExpand({ selectedGroup: (expand.selectedGroup === groupName) ? null : groupName })}>{groupName}</p>\n                {expand.selectedGroup === groupName && \n                  <Tasks group={groupObj} updateGroupTasks={updateGroupTasks}/>\n                }\n              </li>\n            )\n          })}\n        </ul>\n      </div>\n    </div>\n  )\n}\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header>\n        <h1>To-Do</h1>\n      </header>\n      <Groups />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './Groups';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}